package com.github.easai.mersenne;

import java.math.*;

public class Mersenne {
    /**
     * Calculates the Mersenne number generated by a prime number p.
     * 
     * @param p The prime number.
     * @return The Mersenne number.
     */
    public static BigInteger MersenneNumber(int p) {
        // Calculate the Mersenne number by left-shifting 1 by p places and subtracting
        // 1.
        return (BigInteger.ONE.shiftLeft(p)).subtract(BigInteger.ONE);
    }

    /**
     * Checks if a given number n is prime.
     * 
     * @param n The number to check.
     * @return True if n is prime, false otherwise.
     */
    public static boolean isPrime(int n) {
        // Check if n is divisible by any number from 2 to the square root of n.
        if (n == 1)
            return false;

        int max = (int) Math.sqrt(n);
        int i = 1;
        while ((n % (i + 1)) != 0 && ++i < max)
            ;

        return !(i < max);
    }

    /**
     * Checks if a given BigInteger number n is prime.
     * 
     * @param n The number to check.
     * @return True if n is prime, false otherwise.
     */
    public static boolean isPrime(BigInteger n) {
        // Check if n is divisible by any number from 2 to the square root of n.
        if (n.equals(BigInteger.ONE))
            return false;

        BigInteger max = n;
        BigInteger i = BigInteger.ONE;
        while (!(n.mod(i.add(BigInteger.ONE))).equals(BigInteger.ZERO)
                && (i = i.add(BigInteger.ONE)).compareTo(max) == -1)
            ;

        return i.compareTo(max.subtract(BigInteger.ONE)) == 0;
    }

    /**
     * Checks if a Mersenne number is prime using the Lucas-Lehmer primality test.
     * 
     * @param p The prime number used to generate the Mersenne number.
     * @return True if the Mersenne number is prime, false otherwise.
     * @throws Exception If p is not prime or p is even.
     */
    public static boolean testLucasLehmer(int p) throws Exception {
        if (!isPrime(p) || p % 2 == 0)
            throw new Exception();

        BigInteger mp = MersenneNumber(p);
        System.out.println("Mersenne number of " + p + " is " + mp);

        // Calculate the value of the Lucas sequence at position p-2.
        BigInteger[] f = new BigInteger[p + 1];
        f[0] = new BigInteger("4");
        for (int i = 1; i <= p; i++) {
            f[i] = f[i - 1].multiply(f[i - 1]).subtract(new BigInteger("2"));
        }

        // Check if the result is congruent to 0 modulo the Mersenne number.
        return f[p - 2].mod(mp).equals(BigInteger.ZERO);
    }

    public static void main(String[] args) {
        try {
            System.out.println("Is 2^31 - 1 prime? " + testLucasLehmer(7));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}